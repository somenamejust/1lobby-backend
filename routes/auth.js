const express = require('express');
const passport = require('passport');
const SteamStrategy = require('passport-steam').Strategy;
const User = require('../models/User');
const router = express.Router();
const LocalStrategy = require('passport-local').Strategy;

passport.use(new LocalStrategy({ usernameField: 'email' }, async (email, password, done) => {
    try {
        const user = await User.findOne({ email: email });
        if (!user || user.password !== password) {
            return done(null, false, { message: 'Invalid credentials.' });
        }
        return done(null, user);
    } catch (err) { return done(err); }
}));

passport.use(new SteamStrategy({
    returnURL: 'https://1lobby.xyz/api/auth/steam/return',
    realm: 'https://1lobby.xyz/',
    apiKey: process.env.STEAM_API_KEY, // üëà Don't forget your key
    passReqToCallback: true
  },
  async (req, identifier, profile, done) => {
    try {
      const loggedInUser = req.user; // User from our session
      if (loggedInUser) {
        loggedInUser.steamId = profile.id;
        loggedInUser.steamProfile = profile._json;
        await loggedInUser.save();
        return done(null, loggedInUser); // Return OUR user, not the steam profile
      } else {
        throw new Error('User not logged in before linking.');
      }
    } catch (err) {
      return done(err);
    }
  }
));

passport.serializeUser((user, done) => {
    done(null, user._id);
});

passport.deserializeUser(async (id, done) => {
    const user = await User.findById(id).catch(err => done(err));
    done(null, user || null);
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: POST /api/auth/register
router.post('/register', async (req, res, next) => { // –î–æ–±–∞–≤–ª—è–µ–º next
  try {
    const { email, password, username } = req.body;
    // ... –≤–∞—à–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ...
    if (await User.findOne({ $or: [{ email }, { username }] })) {
      return res.status(400).json({ message: 'Email –∏–ª–∏ –ª–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç' });
    }

    const newUser = new User({
      id: Date.now(),
      email,
      username,
      password,
      avatarUrl: `https://api.dicebear.com/7.x/pixel-art/svg?seed=${username}`,
    });

    await newUser.save();

    // --- üëá –ì–õ–ê–í–ù–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï üëá ---
    // –°—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è, —Å–æ–∑–¥–∞—ë–º —Å–µ—Å—Å–∏—é –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    req.login(newUser, (err) => {
      if (err) { 
        return next(err); 
      }
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –¥–∞–Ω–Ω—ã–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      return res.status(201).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω', user: newUser });
    });

  } catch (error) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –≤—Ö–æ–¥–∞: POST /api/auth/login
router.post('/login', passport.authenticate('local'), (req, res) => {
    res.status(200).json({ message: 'Login successful', user: req.user });
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ª–æ–±–±–∏
// PUT /api/auth/session
router.put('/session', async (req, res) => {
  try {
    const { userId, lobbyId } = req.body; // –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ ID –ª–æ–±–±–∏

    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ–≥–æ currentLobbyId
    const updatedUser = await User.findOneAndUpdate(
      { id: userId }, // –ù–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω–æ–º—É id
      { $set: { currentLobbyId: lobbyId } }, // –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
      { new: true } // –í–µ—Ä–Ω—É—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
    );

    if (!updatedUser) {
      return res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    res.status(200).json(updatedUser);

  } catch (error) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏' });
  }
});

router.get('/steam', passport.authenticate('steam'));

// --- üëá THE FINAL FIX IS HERE üëá ---
router.get('/steam/return',
  // 1. –°–Ω–∞—á–∞–ª–∞ Passport –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ –æ—Ç–≤–µ—Ç –æ—Ç Steam –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.
  passport.authenticate('steam', { failureRedirect: 'https://1lobby.vercel.app/profile' }),
  
  // 2. –ü–æ—Å–ª–µ —É—Å–ø–µ—Ö–∞, –º—ã –≤—Ä—É—á–Ω—É—é –æ–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Å—Å–∏—é –∏ –¥–µ–ª–∞–µ–º —Ä–µ–¥–∏—Ä–µ–∫—Ç.
  async (req, res) => {
    try {
      // req.user –∑–¥–µ—Å—å - —ç—Ç–æ –Ω–∞—à –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –≤ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ Steam
      const updatedUserFromStrategy = req.user;
      
      // 3. –Ø–≤–Ω–æ –≤—ã–∑—ã–≤–∞–µ–º req.login(), —á—Ç–æ–±—ã –ü–ï–†–ï–ó–ê–ü–ò–°–ê–¢–¨ —Å—Ç–∞—Ä—É—é —Å–µ—Å—Å–∏—é –Ω–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      req.login(updatedUserFromStrategy, (err) => {
        if (err) {
          console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏ –ø–æ—Å–ª–µ –ø—Ä–∏–≤—è–∑–∫–∏ Steam:", err);
          return res.redirect('https://1lobby.vercel.app/profile?error=session_error');
        }
        
        // 4. –¢–µ–ø–µ—Ä—å, –∫–æ–≥–¥–∞ —Å–µ—Å—Å–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞, –±–µ–∑–æ–ø–∞—Å–Ω–æ –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å
        return res.redirect('https://1lobby.vercel.app/profile');
      });
    } catch (error) {
        console.error("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ /steam/return:", error);
        res.redirect('https://1lobby.vercel.app/profile?error=unknown_error');
    }
  }
);

module.exports = router;