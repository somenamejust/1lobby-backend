const express = require('express');
const router = express.Router();
const Lobby = require('../models/Lobby');
const User = require('../models/User');
const botService = require('../services/botService');

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –í–°–ï–• –ª–æ–±–±–∏
// GET /api/lobbies
router.get('/', async (req, res) => {
  try {
    const lobbies = await Lobby.find({ status: { $ne: 'finished' } });
    res.status(200).json(lobbies);
  } catch (error) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –û–î–ù–û–ì–û –ª–æ–±–±–∏ –ø–æ ID
// GET /api/lobbies/:id
router.get('/:id', async (req, res) => {
  try {
    const lobby = await Lobby.findOne({ id: req.params.id });
    if (!lobby) {
      return res.status(404).json({ message: '–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
    }
    res.status(200).json(lobby);
  } catch (error) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ù–û–í–û–ì–û –ª–æ–±–±–∏
// POST /api/lobbies
router.post('/', async (req, res) => {
  try {
    const newLobby = new Lobby(req.body); 
    await newLobby.save();

    // üÜï –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° BOT API: –°–æ–∑–¥–∞–Ω–∏–µ –ª–æ–±–±–∏ –≤ Dota 2
    if (newLobby.game === 'Dota 2') {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —É –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ –≤ —Å–ª–æ—Ç–∞—Ö –µ—Å—Ç—å Steam ID
        const playersInSlots = newLobby.slots.filter(s => s.user);
        const missingSteamId = [];

        for (const slot of playersInSlots) {
          const user = await User.findOne({ id: slot.user.id });
          if (!user || !user.steamId) {
            missingSteamId.push(slot.user.username);
          }
        }

        if (missingSteamId.length > 0) {
          console.log(`[Bot API] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å Dota 2 –ª–æ–±–±–∏: —É –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ—Ç Steam ID: ${missingSteamId.join(', ')}`);
          // –õ–æ–±–±–∏ —Å–æ–∑–¥–∞–Ω–æ –Ω–∞ —Å–∞–π—Ç–µ, –Ω–æ –Ω–µ –≤ Dota 2
          newLobby.status = 'waiting'; // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å —Ç–∏–ø–∞ 'no_steam_id'
          await newLobby.save();
          return res.status(201).json(newLobby);
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º –º–∞—Å—Å–∏–≤—ã –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥
        const radiantSlots = newLobby.slots.filter(s => s.user && s.team === 'radiant');
        const direSlots = newLobby.slots.filter(s => s.user && s.team === 'dire');

        const radiantPlayers = await Promise.all(
          radiantSlots.map(async (slot, index) => {
            const user = await User.findOne({ id: slot.user.id });
            return {
              steamId: user.steamId,
              slot: index + 1
            };
          })
        );

        const direPlayers = await Promise.all(
          direSlots.map(async (slot, index) => {
            const user = await User.findOne({ id: slot.user.id });
            return {
              steamId: user.steamId,
              slot: index + 1
            };
          })
        );

        // –°–æ–∑–¥–∞–µ–º –ª–æ–±–±–∏ —á–µ—Ä–µ–∑ Bot API
        const botResult = await botService.createDotaLobby({
          name: newLobby._id.toString(), // MongoDB ID –∫–∞–∫ –Ω–∞–∑–≤–∞–Ω–∏–µ
          password: newLobby.password || '',
          region: 8, // Europe West
          gameMode: 23, // All Pick
          radiantPlayers,
          direPlayers
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–±–±–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –±–æ—Ç–µ
        newLobby.botServerId = botResult.botServerId;
        newLobby.botAccountId = botResult.lobbyId;
        await newLobby.save();

        console.log(`[Bot API] Dota 2 –ª–æ–±–±–∏ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ! Bot ID: ${botResult.lobbyId}`);
      } catch (botError) {
        console.error('[Bot API] –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ Dota 2 –ª–æ–±–±–∏:', botError.message);
        // –õ–æ–±–±–∏ —Å–æ–∑–¥–∞–Ω–æ –Ω–∞ —Å–∞–π—Ç–µ, –Ω–æ –Ω–µ –≤ Dota 2 - —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
        // –ò–≥—Ä–æ–∫–∏ —Å–º–æ–≥—É—Ç –∏–≥—Ä–∞—Ç—å –Ω–∞ —Å–∞–π—Ç–µ, –Ω–æ –Ω–µ –≤ —Ä–µ–∞–ª—å–Ω–æ–π Dota 2
      }
    }

    res.status(201).json(newLobby);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ª–æ–±–±–∏:', error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–æ–±–±–∏' });
  }
});

router.put('/:id/join', async (req, res) => {
  try {
    const lobbyId = req.params.id;
    const { user: userFromRequest, isSpectator } = req.body;
    const io = req.app.get('socketio');

    console.log('[–ë—ç–∫–µ–Ω–¥] –ü–æ–ª—É—á–µ–Ω —Å–ª–µ–¥—É—é—â–∏–π –æ–±—ä–µ–∫—Ç userFromRequest:', userFromRequest);
    
    if (!userFromRequest?.id) {
      return res.status(400).json({ message: 'User data is incorrect' });
    }

    const lobby = await Lobby.findOne({ id: lobbyId });
    if (!lobby) {
      return res.status(404).json({ message: 'Lobby not found' });
    }

    if (lobby.bannedUsers?.includes(String(userFromRequest.id))) {
      return res.status(403).json({ message: "–í—ã –±—ã–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ —ç—Ç–æ–≥–æ –ª–æ–±–±–∏." });
    }

    const fullUser = await User.findById(userFromRequest._id);
    if (!fullUser) return res.status(404).json({ message: 'User not found in DB' });

    if (isSpectator) {
      if (!lobby.spectators.some(spec => String(spec._id) === String(fullUser._id))) {
        lobby.spectators.push(fullUser);
        lobby.markModified('spectators');
      }
    } else {
      if (lobby.bannedUsers?.includes(String(userFromRequest.id))) {
        return res.status(403).json({ message: "You have been banned from this lobby." });
      }
      if (lobby.slots.some(slot => slot.user?.id === userFromRequest.id)) {
        return res.status(200).json(lobby.toObject());
      }

      const freeSlotIndex = lobby.slots.findIndex(slot => !slot.user);
      if (freeSlotIndex === -1) {
        return res.status(400).json({ message: 'Lobby is full' });
      }

      const userForCheck = await User.findOne({ id: userFromRequest.id });
      if (!userForCheck || userForCheck.balance < lobby.entryFee) {
          return res.status(403).json({ message: "You do not have enough funds to join." });
      }

      lobby.slots[freeSlotIndex].user = { 
        id: userFromRequest.id, _id: userFromRequest._id, email: userFromRequest.email,
        username: userFromRequest.username, avatarUrl: userFromRequest.avatarUrl, isReady: false 
      };
      lobby.players = lobby.slots.filter(s => s.user).length;
      lobby.markModified('slots');
    }
    
    const updatedLobby = await lobby.save();
    
    io.in(String(lobbyId)).emit('lobbyUpdated', updatedLobby.toObject());
    res.status(200).json(updatedLobby.toObject());

  } catch (error) {
    console.error("Error joining lobby:", error);
    res.status(500).json({ message: 'Server error' });
  }
});

router.put('/:id/leave', async (req, res) => {
  try {
    const { userId } = req.body;
    const lobby = await Lobby.findOne({ id: req.params.id });
    const io = req.app.get('socketio');
    const roomName = String(req.params.id);

    if (!lobby) return res.status(200).json({ message: "Lobby already deleted." });

    const isHostLeaving = String(lobby.host.id) === String(userId);

    if (isHostLeaving) {
      io.in(roomName).emit('lobbyDeleted', { message: 'The host has left the lobby.' });
      await Lobby.deleteOne({ id: req.params.id });
      return res.status(200).json({ message: "Lobby deleted." });
    }

    const initialCount = lobby.slots.filter(s => s.user).length + lobby.spectators.length;

    lobby.slots = lobby.slots.map(slot => {
      if (slot.user?.id === userId) return { ...slot, user: null };
      return slot;
    });

    lobby.spectators = lobby.spectators.filter(spec => spec.id !== userId);
    
    const finalPlayerCount = lobby.slots.filter(s => s.user).length;
    const finalSpectatorCount = lobby.spectators.length;
    const finalTotalCount = finalPlayerCount + finalSpectatorCount;

    if (finalTotalCount === initialCount) {
      return res.status(404).json({ message: "User was not found in the lobby." });
    }
    
    if (finalTotalCount === 0) {
      io.in(roomName).emit('lobbyDeleted', { message: 'The lobby is now empty.' });
      await Lobby.deleteOne({ id: req.params.id });
      return res.status(200).json({ message: "Lobby deleted." });
    }

    lobby.players = finalPlayerCount;
    lobby.markModified('slots');
    lobby.markModified('spectators');
    const updatedLobby = await lobby.save();

    io.in(roomName).emit('lobbyUpdated', updatedLobby.toObject());
    res.status(200).json(updatedLobby.toObject());

  } catch (error) {
    console.error("Error leaving lobby:", error);
    res.status(500).json({ message: "Server error" });
  }
});

router.put('/:id/occupy', async (req, res) => {
  try {
    const { userId, slot: targetSlotInfo } = req.body;
    const lobby = await Lobby.findOne({ id: req.params.id });

    if (!lobby) return res.status(404).json({ message: "–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" });

    const userForCheck = await User.findOne({ id: userId });
    if (userForCheck.balance < lobby.entryFee) {
        return res.status(403).json({ message: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤, —á—Ç–æ–±—ã –∑–∞–Ω—è—Ç—å —Å–ª–æ—Ç." });
    }

    const targetSlot = lobby.slots.find(s => s.team === targetSlotInfo.team && s.position === targetSlotInfo.position);
    if (!targetSlot) return res.status(404).json({ message: "–¶–µ–ª–µ–≤–æ–π —Å–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    if (targetSlot.user) return res.status(400).json({ message: "–¶–µ–ª–µ–≤–æ–π —Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç" });

    const currentSlotIndex = lobby.slots.findIndex(s => s.user?.id === userId);
    const userAsSpectator = lobby.spectators.find(spec => spec.id === userId);
    
    if (currentSlotIndex !== -1) {
      console.log("–ò–≥—Ä–æ–∫ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è –∏–∑ –æ–¥–Ω–æ–≥–æ —Å–ª–æ—Ç–∞ –≤ –¥—Ä—É–≥–æ–π.");
      const userToMove = lobby.slots[currentSlotIndex].user;
      lobby.slots[currentSlotIndex].user = null;
      targetSlot.user = userToMove;
    } 
    else if (userAsSpectator) {
      console.log("–ó—Ä–∏—Ç–µ–ª—å –∑–∞–Ω–∏–º–∞–µ—Ç —Å–ª–æ—Ç.");
      targetSlot.user = { ...userAsSpectator, isReady: false };
      lobby.spectators = lobby.spectators.filter(spec => spec.id !== userId);
    } 
    else {
      return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —ç—Ç–æ–º –ª–æ–±–±–∏" });
    }

    lobby.players = lobby.slots.filter(s => s.user).length;
    lobby.markModified('slots');
    lobby.markModified('spectators');

    const updatedLobby = await lobby.save();

    const io = req.app.get('socketio');
    io.in(req.params.id).emit('lobbyUpdated', updatedLobby.toObject());

    res.status(200).json(updatedLobby.toObject());

  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–Ω—è—Ç—å —Å–ª–æ—Ç:", error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

router.put('/:id/vacate', async (req, res) => {
  try {
    const { userId } = req.body;
    const lobby = await Lobby.findOne({ id: req.params.id });

    if (!lobby) return res.status(404).json({ message: "–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" });

    const slotIndex = lobby.slots.findIndex(s => s.user?.id === userId);
    if (slotIndex === -1) return res.status(404).json({ message: "–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ª–æ—Ç–µ" });

    const userToMove = lobby.slots[slotIndex].user;

    lobby.slots[slotIndex].user = null;
    if (!lobby.spectators.some(spec => spec.id === userId)) {
        lobby.spectators.push(userToMove);
    }
    lobby.players = lobby.slots.filter(s => s.user).length;

    lobby.markModified('slots');
    lobby.markModified('spectators');

    const updatedLobby = await lobby.save();

    const io = req.app.get('socketio');
    io.in(req.params.id).emit('lobbyUpdated', updatedLobby.toObject());

    res.status(200).json(updatedLobby.toObject());

  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ —Å–ª–æ—Ç–∞:", error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

router.put('/:id/ready', async (req, res) => {
  try {
    const lobbyId = req.params.id;
    const { userId } = req.body;

    if (!userId) {
      return res.status(400).json({ message: '–ù–µ —É–∫–∞–∑–∞–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
    }

    const lobby = await Lobby.findOne({ id: lobbyId });
    if (!lobby) {
      return res.status(404).json({ message: "–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" });
    }

    const slot = lobby.slots.find(s => s.user?.id === userId);
    if (!slot || !slot.user) {
      return res.status(404).json({ message: "–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —ç—Ç–æ–º –ª–æ–±–±–∏" });
    }

    slot.user.isReady = !slot.user.isReady;

    const playersInSlots = lobby.slots.filter(s => s.user);
    const areAllPlayersReady = playersInSlots.length === lobby.maxPlayers && playersInSlots.every(p => p.user.isReady);

    if (areAllPlayersReady) {
      lobby.status = 'countdown';
      lobby.countdownStartTime = Date.now();
      console.log(`[–õ–æ–±–±–∏ ${lobby.id}] –í—Å–µ –≥–æ—Ç–æ–≤—ã! –ó–∞–ø—É—Å–∫ –æ—Ç—Å—á–µ—Ç–∞.`);
    } else {
      lobby.status = 'waiting';
      lobby.countdownStartTime = null;
      console.log(`[–õ–æ–±–±–∏ ${lobby.id}] –û—Ç–º–µ–Ω–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏. –û—Ç—Å—á–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.`);
    }

    lobby.markModified('slots');

    const updatedLobby = await lobby.save();

    const io = req.app.get('socketio');
    io.in(req.params.id).emit('lobbyUpdated', updatedLobby.toObject());

    res.status(200).json(updatedLobby.toObject());

  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:", error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

router.put('/:id/kick', async (req, res) => {
  try {
    const lobbyId = req.params.id;
    const { userIdToKick, hostId } = req.body;
    const io = req.app.get('socketio');
    const roomName = String(lobbyId);

    if (!userIdToKick || !hostId) {
      return res.status(400).json({ message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∏–∫–∞' });
    }

    const lobby = await Lobby.findOne({ id: lobbyId });
    if (!lobby) {
      return res.status(404).json({ message: "–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" });
    }

    if (String(lobby.host.id) !== String(hostId)) {
      return res.status(403).json({ message: "–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –∫–∏–∫–∞—Ç—å –∏–≥—Ä–æ–∫–æ–≤!" });
    }

    const slotIndex = lobby.slots.findIndex(s => s.user?.id === userIdToKick);
    if (slotIndex !== -1) {
      lobby.bannedUsers.push(userIdToKick);
      lobby.slots[slotIndex].user = null;
      lobby.players = lobby.slots.filter(s => s.user).length;
      lobby.markModified('slots');
      lobby.markModified('bannedUsers');
    } else {
        return res.status(404).json({ message: "–ö–∏–∫–∞–µ–º—ã–π –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ª–æ—Ç–µ" });
    }

    const updatedLobby = await lobby.save();

    // üÜï –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° BOT API: –ö–∏–∫ –∏–∑ Dota 2 –ª–æ–±–±–∏
    if (lobby.game === 'dota2' && lobby.botAccountId) {
      try {
        const kickedUser = await User.findOne({ id: userIdToKick });
        if (kickedUser && kickedUser.steamId) {
          const server = botService.getAvailableBotServer();
          await botService.kickPlayer(lobby.botAccountId, kickedUser.steamId, server.url);
          console.log(`[Bot API] –ò–≥—Ä–æ–∫ ${kickedUser.username} –∫–∏–∫–Ω—É—Ç –∏–∑ Dota 2 –ª–æ–±–±–∏`);
        }
      } catch (botError) {
        console.error('[Bot API] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–∏–∫–µ –∏–∑ Dota 2:', botError.message);
        // –ò–≥—Ä–æ–∫ –∫–∏–∫–Ω—É—Ç —Å —Å–∞–π—Ç–∞, –Ω–æ –≤–æ–∑–º–æ–∂–Ω–æ –æ—Å—Ç–∞–ª—Å—è –≤ Dota 2 - –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
      }
    }

    const socketsInRoom = await io.in(roomName).fetchSockets();
    const kickedSocket = socketsInRoom.find(s => String(s.data.userId) === String(userIdToKick));
    
    if (kickedSocket) {
      kickedSocket.emit('youWereKicked', { message: '–•–æ—Å—Ç –∏—Å–∫–ª—é—á–∏–ª –≤–∞—Å –∏–∑ –ª–æ–±–±–∏.' });
      console.log(`[–ö–∏–∫] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ª–∏—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫–∏–∫–µ —Å–æ–∫–µ—Ç—É ${kickedSocket.id}`);
    } else {
      console.log(`[–ö–∏–∫] –°–æ–∫–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userIdToKick} –Ω–µ –Ω–∞–π–¥–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –æ—Ñ—Ñ–ª–∞–π–Ω).`);
    }

    io.in(roomName).emit('lobbyUpdated', updatedLobby.toObject());

    res.status(200).json(updatedLobby.toObject());

  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–∏–∫–µ –∏–≥—Ä–æ–∫–∞:", error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

router.put('/:id/start', async (req, res) => {
  try {
    const lobbyId = req.params.id;
    const { hostId } = req.body;

    const lobby = await Lobby.findOne({ id: lobbyId });
    if (!lobby) {
      return res.status(404).json({ message: "Lobby not found" });
    }

    if (String(lobby.host.id) !== String(hostId)) {
      return res.status(403).json({ message: "Only the host can start the game!" });
    }

    if (lobby.status === 'in_progress' || lobby.status === 'finished') {
        return res.status(400).json({ message: "The game has already started or is finished." });
    }

    // üÜï –ò–ù–¢–ï–ì–†–ê–¶–ò–Ø –° BOT API: –ó–∞–ø—É—Å–∫ –∏–≥—Ä—ã –≤ Dota 2
    if (lobby.game === 'dota2' && lobby.botAccountId) {
      try {
        const server = botService.getAvailableBotServer();
        await botService.startGame(lobby.botAccountId, server.url);
        console.log(`[Bot API] –ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞ –≤ Dota 2! Lobby ID: ${lobby.botAccountId}`);
      } catch (botError) {
        console.error('[Bot API] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã –≤ Dota 2:', botError.message);
        return res.status(500).json({ 
          message: '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É –≤ Dota 2',
          error: botError.message 
        });
      }
    }

    lobby.status = 'in_progress';
    lobby.countdownStartTime = null;
    lobby.startedAt = new Date(); // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É —Å—Ç–∞—Ä—Ç–∞

    const updatedLobby = await lobby.save();

    const io = req.app.get('socketio');
    io.in(req.params.id).emit('lobbyUpdated', updatedLobby.toObject());

    res.status(200).json(updatedLobby.toObject());

  } catch (error) {
    console.error("Error starting game:", error);
    res.status(500).json({ message: 'Server error' });
  }
});

router.post('/:id/declare-winner', async (req, res) => {
  try {
    const { hostId, winningTeam } = req.body;
    const lobby = await Lobby.findOne({ id: req.params.id });

    if (!lobby) return res.status(404).json({ message: "–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" });
    if (String(lobby.host.id) !== String(hostId)) {
      return res.status(403).json({ message: "–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è!" });
    }
    if (lobby.status !== 'in_progress') {
      return res.status(400).json({ message: "–ò–≥—Ä–∞ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ" });
    }

    const entryFee = lobby.entryFee;
    const winners = lobby.slots.filter(s => s.user && s.team === winningTeam).map(s => s.user);
    const losers = lobby.slots.filter(s => s.user && s.team !== winningTeam).map(s => s.user);
    
    for (const loser of losers) {
      await User.updateOne({ id: loser.id }, { $inc: { balance: -entryFee } });
      console.log(`[–°–ø–∏—Å–∞–Ω–æ] –° –∏–≥—Ä–æ–∫–∞ ${loser.username} —Å–ø–∏—Å–∞–Ω–æ ${entryFee}$.`);
    }

    const amountToWin = entryFee * (losers.length / winners.length);
    for (const winner of winners) {
      await User.updateOne({ id: winner.id }, { $inc: { balance: amountToWin } });
      console.log(`[–ù–∞—á–∏—Å–ª–µ–Ω–æ] –ò–≥—Ä–æ–∫—É ${winner.username} –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${amountToWin}$.`);
    }
    
    lobby.status = 'finished';
    lobby.finishedAt = new Date(); // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    const updatedLobby = await lobby.save();

    const io = req.app.get('socketio');
    io.in(req.params.id).emit('lobbyUpdated', updatedLobby.toObject());

    res.status(200).json({ 
      message: `–ö–æ–º–∞–Ω–¥–∞ ${winningTeam} –ø–æ–±–µ–¥–∏–ª–∞!`, 
      lobby: updatedLobby.toObject()
    });

  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ø—Ä–∏–∑–æ–≤:", error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

module.exports = router;