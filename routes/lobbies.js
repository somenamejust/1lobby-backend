const express = require('express');
const router = express.Router();
const Lobby = require('../models/Lobby');
const User = require('../models/User');

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –í–°–ï–• –ª–æ–±–±–∏
// GET /api/lobbies
router.get('/', async (req, res) => {
  try {
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –ª–æ–±–±–∏, —É –∫–æ—Ç–æ—Ä—ã—Ö —Å—Ç–∞—Ç—É—Å –ù–ï –†–ê–í–ï–ù ($ne) 'finished'
    const lobbies = await Lobby.find({ status: { $ne: 'finished' } });
    res.status(200).json(lobbies);
  } catch (error) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –û–î–ù–û–ì–û –ª–æ–±–±–∏ –ø–æ ID
// GET /api/lobbies/:id
router.get('/:id', async (req, res) => {
  try {
    const lobby = await Lobby.findOne({ id: req.params.id });
    if (!lobby) {
      return res.status(404).json({ message: '–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ' });
    }
    res.status(200).json(lobby);
  } catch (error) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ù–û–í–û–ì–û –ª–æ–±–±–∏
// POST /api/lobbies
router.post('/', async (req, res) => {
  try {
    // req.body –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤—Å–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –º—ã –æ—Ç–ø—Ä–∞–≤–∏–º —Å —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
    const newLobby = new Lobby(req.body); 
    await newLobby.save(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤–æ–µ –ª–æ–±–±–∏ –≤ –±–∞–∑—É
    res.status(201).json(newLobby);
  } catch (error) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ª–æ–±–±–∏' });
  }
});

router.put('/:id/join', async (req, res) => {
  try {
    const lobbyId = req.params.id;
    const { user: userFromRequest, isSpectator } = req.body;
    const io = req.app.get('socketio');

    console.log('[–ë—ç–∫–µ–Ω–¥] –ü–æ–ª—É—á–µ–Ω —Å–ª–µ–¥—É—é—â–∏–π –æ–±—ä–µ–∫—Ç userFromRequest:', userFromRequest);
    
    if (!userFromRequest?.id) {
      return res.status(400).json({ message: 'User data is incorrect' });
    }

    const lobby = await Lobby.findOne({ id: lobbyId });
    if (!lobby) {
      return res.status(404).json({ message: 'Lobby not found' });
    }

    if (lobby.bannedUsers?.includes(String(userFromRequest.id))) {
      return res.status(403).json({ message: "–í—ã –±—ã–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ —ç—Ç–æ–≥–æ –ª–æ–±–±–∏." });
    }

    const fullUser = await User.findById(userFromRequest._id);
    if (!fullUser) return res.status(404).json({ message: 'User not found in DB' });

    if (isSpectator) {
      if (!lobby.spectators.some(spec => String(spec._id) === String(fullUser._id))) {
        lobby.spectators.push(fullUser);
        lobby.markModified('spectators');
      }
    } else {
      // --- üëá FINAL FIX IS HERE üëá ---
      // SCENARIO 2: User wants to join as a player

      // 1. FIRST, check for bans and if the user is already in a slot.
      if (lobby.bannedUsers?.includes(String(userFromRequest.id))) {
        return res.status(403).json({ message: "You have been banned from this lobby." });
      }
      if (lobby.slots.some(slot => slot.user?.id === userFromRequest.id)) {
        return res.status(200).json(lobby.toObject());
      }

      // 2. SECOND, check if the lobby is full.
      const freeSlotIndex = lobby.slots.findIndex(slot => !slot.user);
      if (freeSlotIndex === -1) {
        return res.status(400).json({ message: 'Lobby is full' });
      }

      // 3. THIRD, check the user's balance BEFORE adding them.
      const userForCheck = await User.findOne({ id: userFromRequest.id });
      if (!userForCheck || userForCheck.balance < lobby.entryFee) {
          return res.status(403).json({ message: "You do not have enough funds to join." });
      }

      // 4. FINALLY, if all checks pass, add the user to the slot.
      lobby.slots[freeSlotIndex].user = { 
        id: userFromRequest.id, _id: userFromRequest._id, email: userFromRequest.email,
        username: userFromRequest.username, avatarUrl: userFromRequest.avatarUrl, isReady: false 
      };
      lobby.players = lobby.slots.filter(s => s.user).length;
      lobby.markModified('slots');
    }
    
    const updatedLobby = await lobby.save();
    
    io.in(String(lobbyId)).emit('lobbyUpdated', updatedLobby.toObject());
    res.status(200).json(updatedLobby.toObject());

  } catch (error) {
    console.error("Error joining lobby:", error);
    res.status(500).json({ message: 'Server error' });
  }
});

router.put('/:id/leave', async (req, res) => {
  try {
    const { userId } = req.body;
    const lobby = await Lobby.findOne({ id: req.params.id });
    const io = req.app.get('socketio');
    const roomName = String(req.params.id);

    if (!lobby) return res.status(200).json({ message: "Lobby already deleted." });

    const isHostLeaving = String(lobby.host.id) === String(userId);

    if (isHostLeaving) {
      io.in(roomName).emit('lobbyDeleted', { message: 'The host has left the lobby.' });
      await Lobby.deleteOne({ id: req.params.id });
      return res.status(200).json({ message: "Lobby deleted." });
    }

    // --- üëá FINAL, SIMPLIFIED LOGIC üëá ---
    
    // Get the initial number of people in the lobby
    const initialCount = lobby.slots.filter(s => s.user).length + lobby.spectators.length;

    // Remove the user from SLOTS
    lobby.slots = lobby.slots.map(slot => {
      if (slot.user?.id === userId) return { ...slot, user: null };
      return slot;
    });

    // Remove the user from SPECTATORS
    lobby.spectators = lobby.spectators.filter(spec => spec.id !== userId);
    
    // Get the final number of people
    const finalPlayerCount = lobby.slots.filter(s => s.user).length;
    const finalSpectatorCount = lobby.spectators.length;
    const finalTotalCount = finalPlayerCount + finalSpectatorCount;

    // If the number of people has not changed, the user was not found.
    if (finalTotalCount === initialCount) {
      return res.status(404).json({ message: "User was not found in the lobby." });
    }
    
    // If the lobby is now empty, delete it.
    if (finalTotalCount === 0) {
      io.in(roomName).emit('lobbyDeleted', { message: 'The lobby is now empty.' });
      await Lobby.deleteOne({ id: req.params.id });
      return res.status(200).json({ message: "Lobby deleted." });
    }

    // Otherwise, update the lobby and broadcast the changes.
    lobby.players = finalPlayerCount;
    lobby.markModified('slots');
    lobby.markModified('spectators');
    const updatedLobby = await lobby.save();

    io.in(roomName).emit('lobbyUpdated', updatedLobby.toObject());
    res.status(200).json(updatedLobby.toObject());

  } catch (error) {
    console.error("Error leaving lobby:", error);
    res.status(500).json({ message: "Server error" });
  }
});

router.put('/:id/occupy', async (req, res) => {
  try {
    const { userId, slot: targetSlotInfo } = req.body; // –ü–æ–ª—É—á–∞–µ–º ID —é–∑–µ—Ä–∞ –∏ –∏–Ω—Ñ–æ –æ —Å–ª–æ—Ç–µ (team, position)
    const lobby = await Lobby.findOne({ id: req.params.id });

    if (!lobby) return res.status(404).json({ message: "–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" });

    const userForCheck = await User.findOne({ id: userId });
    if (userForCheck.balance < lobby.entryFee) {
        return res.status(403).json({ message: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤, —á—Ç–æ–±—ã –∑–∞–Ω—è—Ç—å —Å–ª–æ—Ç." });
    }

    const targetSlot = lobby.slots.find(s => s.team === targetSlotInfo.team && s.position === targetSlotInfo.position);
    if (!targetSlot) return res.status(404).json({ message: "–¶–µ–ª–µ–≤–æ–π —Å–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    if (targetSlot.user) return res.status(400).json({ message: "–¶–µ–ª–µ–≤–æ–π —Å–ª–æ—Ç —É–∂–µ –∑–∞–Ω—è—Ç" });

    const currentSlotIndex = lobby.slots.findIndex(s => s.user?.id === userId);
    const userAsSpectator = lobby.spectators.find(spec => spec.id === userId);
    
    // –°—Ü–µ–Ω–∞—Ä–∏–π 1: –ò–≥—Ä–æ–∫ —É–∂–µ –≤ —Å–ª–æ—Ç–µ –∏ —Ö–æ—á–µ—Ç –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å—Å—è
    if (currentSlotIndex !== -1) {
      console.log("–ò–≥—Ä–æ–∫ –ø–µ—Ä–µ–º–µ—â–∞–µ—Ç—Å—è –∏–∑ –æ–¥–Ω–æ–≥–æ —Å–ª–æ—Ç–∞ –≤ –¥—Ä—É–≥–æ–π.");
      const userToMove = lobby.slots[currentSlotIndex].user; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      lobby.slots[currentSlotIndex].user = null; // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å—Ç–∞—Ä—ã–π —Å–ª–æ—Ç
      targetSlot.user = userToMove; // –ó–∞–Ω–∏–º–∞–µ–º –Ω–æ–≤—ã–π —Å–ª–æ—Ç
    } 
    // –°—Ü–µ–Ω–∞—Ä–∏–π 2: –ó—Ä–∏—Ç–µ–ª—å –∑–∞–Ω–∏–º–∞–µ—Ç —Å–ª–æ—Ç
    else if (userAsSpectator) {
      console.log("–ó—Ä–∏—Ç–µ–ª—å –∑–∞–Ω–∏–º–∞–µ—Ç —Å–ª–æ—Ç.");
      targetSlot.user = { ...userAsSpectator, isReady: false }; // –ó–∞–Ω–∏–º–∞–µ–º —Å–ª–æ—Ç
      lobby.spectators = lobby.spectators.filter(spec => spec.id !== userId); // –£–¥–∞–ª—è–µ–º –∏–∑ –∑—Ä–∏—Ç–µ–ª–µ–π
    } 
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ —Å–ª–æ—Ç–∞—Ö, –Ω–∏ –≤ –∑—Ä–∏—Ç–µ–ª—è—Ö
    else {
      return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —ç—Ç–æ–º –ª–æ–±–±–∏" });
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
    lobby.players = lobby.slots.filter(s => s.user).length;
    lobby.markModified('slots');
    lobby.markModified('spectators');

    const updatedLobby = await lobby.save();

        // --- üëá –û–¢–ü–†–ê–í–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ß–ï–†–ï–ó WEBSOCKET üëá ---
    const io = req.app.get('socketio'); // –ü–æ–ª—É—á–∞–µ–º io –∏–∑ app
    io.in(req.params.id).emit('lobbyUpdated', updatedLobby.toObject()); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –≤ "–∫–æ–º–Ω–∞—Ç–µ"

    res.status(200).json(updatedLobby.toObject());

  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–Ω—è—Ç—å —Å–ª–æ—Ç:", error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

router.put('/:id/vacate', async (req, res) => {
  try {
    const { userId } = req.body;
    const lobby = await Lobby.findOne({ id: req.params.id });

    if (!lobby) return res.status(404).json({ message: "–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" });

    const slotIndex = lobby.slots.findIndex(s => s.user?.id === userId);
    if (slotIndex === -1) return res.status(404).json({ message: "–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ª–æ—Ç–µ" });

    const userToMove = lobby.slots[slotIndex].user;

    // TODO: –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–µ–Ω–µ–≥ (lobby.entryFee) –Ω–∞ –±–∞–ª–∞–Ω—Å userToMove.
    // –≠—Ç–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –º–æ–¥–µ–ª–∏ User.

    // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    lobby.slots[slotIndex].user = null; // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º —Å–ª–æ—Ç
    if (!lobby.spectators.some(spec => spec.id === userId)) {
        lobby.spectators.push(userToMove); // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∑—Ä–∏—Ç–µ–ª–∏, –µ—Å–ª–∏ –µ–≥–æ —Ç–∞–º –µ—â–µ –Ω–µ—Ç
    }
    lobby.players = lobby.slots.filter(s => s.user).length;

    lobby.markModified('slots');
    lobby.markModified('spectators');

    const updatedLobby = await lobby.save();

        // --- üëá –û–¢–ü–†–ê–í–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ß–ï–†–ï–ó WEBSOCKET üëá ---
    const io = req.app.get('socketio'); // –ü–æ–ª—É—á–∞–µ–º io –∏–∑ app
    io.in(req.params.id).emit('lobbyUpdated', updatedLobby.toObject()); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –≤ "–∫–æ–º–Ω–∞—Ç–µ"

    res.status(200).json(updatedLobby.toObject());

  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–∏ —Å–ª–æ—Ç–∞:", error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

router.put('/:id/ready', async (req, res) => {
  try {
    const lobbyId = req.params.id;
    const { userId } = req.body;

    if (!userId) {
      return res.status(400).json({ message: '–ù–µ —É–∫–∞–∑–∞–Ω ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è' });
    }

    const lobby = await Lobby.findOne({ id: lobbyId });
    if (!lobby) {
      return res.status(404).json({ message: "–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" });
    }

    const slot = lobby.slots.find(s => s.user?.id === userId);
    if (!slot || !slot.user) {
      return res.status(404).json({ message: "–ò–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —ç—Ç–æ–º –ª–æ–±–±–∏" });
    }

    // 1. –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç—É—Å –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    slot.user.isReady = !slot.user.isReady;

    // --- üëá –í–û–¢ –ì–õ–ê–í–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï üëá ---
    
    // 2. –ü–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –ø—Ä–æ–≤–µ—Ä—è–µ–º, –≥–æ—Ç–æ–≤—ã –ª–∏ —Ç–µ–ø–µ—Ä—å –í–°–ï –∏–≥—Ä–æ–∫–∏
    const playersInSlots = lobby.slots.filter(s => s.user);
    const areAllPlayersReady = playersInSlots.length === lobby.maxPlayers && playersInSlots.every(p => p.user.isReady);

    if (areAllPlayersReady) {
      // 3. –ï—Å–ª–∏ –≤—Å–µ –≥–æ—Ç–æ–≤—ã - –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Ç—Å—á–µ—Ç!
      lobby.status = 'countdown';
      lobby.countdownStartTime = Date.now();
      console.log(`[–õ–æ–±–±–∏ ${lobby.id}] –í—Å–µ –≥–æ—Ç–æ–≤—ã! –ó–∞–ø—É—Å–∫ –æ—Ç—Å—á–µ—Ç–∞.`);
    } else {
      // 4. –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ –æ—Ç–º–µ–Ω–∏–ª –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å - —Å–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
      lobby.status = 'waiting';
      lobby.countdownStartTime = null;
      console.log(`[–õ–æ–±–±–∏ ${lobby.id}] –û—Ç–º–µ–Ω–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏. –û—Ç—Å—á–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.`);
    }
    // --- –ö–æ–Ω–µ—Ü –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è ---

    lobby.markModified('slots'); // –ü–æ–º–µ—á–∞–µ–º –º–∞—Å—Å–∏–≤ –∫–∞–∫ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã–π

    const updatedLobby = await lobby.save();

        // --- üëá –û–¢–ü–†–ê–í–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ß–ï–†–ï–ó WEBSOCKET üëá ---
    const io = req.app.get('socketio'); // –ü–æ–ª—É—á–∞–µ–º io –∏–∑ app
    io.in(req.params.id).emit('lobbyUpdated', updatedLobby.toObject()); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –≤ "–∫–æ–º–Ω–∞—Ç–µ"

    res.status(200).json(updatedLobby.toObject());

  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ —Å—Ç–∞—Ç—É—Å–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏:", error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

router.put('/:id/kick', async (req, res) => {
  try {
    const lobbyId = req.params.id;
    const { userIdToKick, hostId } = req.body;
    const io = req.app.get('socketio'); // –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ io
    const roomName = String(lobbyId);

    if (!userIdToKick || !hostId) {
      return res.status(400).json({ message: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–∏–∫–∞' });
    }

    const lobby = await Lobby.findOne({ id: lobbyId });
    if (!lobby) {
      return res.status(404).json({ message: "–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" });
    }

    // --- üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Ö–æ—Å—Ç–∞ (–æ—Å—Ç–∞—ë—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
    if (String(lobby.host.id) !== String(hostId)) {
      return res.status(403).json({ message: "–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –∫–∏–∫–∞—Ç—å –∏–≥—Ä–æ–∫–æ–≤!" });
    }

    // --- 1. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö ---
    const slotIndex = lobby.slots.findIndex(s => s.user?.id === userIdToKick);
    if (slotIndex !== -1) {
      lobby.bannedUsers.push(userIdToKick);
      lobby.slots[slotIndex].user = null;
      lobby.players = lobby.slots.filter(s => s.user).length;
      lobby.markModified('slots');
      lobby.markModified('bannedUsers');
    } else {
        return res.status(404).json({ message: "–ö–∏–∫–∞–µ–º—ã–π –∏–≥—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–ª–æ—Ç–µ" });
    }
    const updatedLobby = await lobby.save();


    // --- üëá –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ü–û–ò–°–ö –°–û–ö–ï–¢–ê –ò –û–¢–ü–†–ê–í–ö–ê –õ–ò–ß–ù–û–ì–û –°–û–ë–´–¢–ò–Ø üëá ---

    // 2. –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–æ–∫–µ—Ç–æ–≤ –≤ –∫–æ–º–Ω–∞—Ç–µ –ª–æ–±–±–∏
    const socketsInRoom = await io.in(roomName).fetchSockets();
    
    // 3. –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–æ–∫–µ—Ç –∫–∏–∫–Ω—É—Ç–æ–≥–æ –∏–≥—Ä–æ–∫–∞, –∏—Å–ø–æ–ª—å–∑—É—è `socket.data.userId`,
    // –∫–æ—Ç–æ—Ä—ã–π –º—ã —É—Å—Ç–∞–Ω–æ–≤–∏–ª–∏ –ø—Ä–∏ —Å–æ–±—ã—Ç–∏–∏ 'registerUser'.
    const kickedSocket = socketsInRoom.find(s => String(s.data.userId) === String(userIdToKick));
    
    // 4. –ï—Å–ª–∏ —Å–æ–∫–µ—Ç –Ω–∞–π–¥–µ–Ω, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–º—É –ª–∏—á–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ
    if (kickedSocket) {
      kickedSocket.emit('youWereKicked', { message: '–•–æ—Å—Ç –∏—Å–∫–ª—é—á–∏–ª –≤–∞—Å –∏–∑ –ª–æ–±–±–∏.' });
      console.log(`[–ö–∏–∫] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ª–∏—á–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫–∏–∫–µ —Å–æ–∫–µ—Ç—É ${kickedSocket.id}`);
    } else {
      console.log(`[–ö–∏–∫] –°–æ–∫–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userIdToKick} –Ω–µ –Ω–∞–π–¥–µ–Ω (–≤–æ–∑–º–æ–∂–Ω–æ, –æ–Ω —É–∂–µ –æ—Ñ—Ñ–ª–∞–π–Ω).`);
    }

    // 5. –ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –û–ë–©–ï–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–º –≤ –∫–æ–º–Ω–∞—Ç–µ,
    // —á—Ç–æ–±—ã –æ–Ω–∏ —É–≤–∏–¥–µ–ª–∏, —á—Ç–æ —Å–ª–æ—Ç –æ—Å–≤–æ–±–æ–¥–∏–ª—Å—è.
    io.in(roomName).emit('lobbyUpdated', updatedLobby.toObject());

    // 6. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω—ã–π HTTP-–æ—Ç–≤–µ—Ç —Ö–æ—Å—Ç—É.
    res.status(200).json(updatedLobby.toObject());

  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–∏–∫–µ –∏–≥—Ä–æ–∫–∞:", error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

router.put('/:id/start', async (req, res) => {
  try {
    const lobbyId = req.params.id;
    const { hostId } = req.body;

    const lobby = await Lobby.findOne({ id: lobbyId });
    if (!lobby) {
      return res.status(404).json({ message: "Lobby not found" });
    }

    // 1. üîê Security Check: Only the host can start the game
    if (String(lobby.host.id) !== String(hostId)) {
      return res.status(403).json({ message: "Only the host can start the game!" });
    }

    // 2. Logic Check: The game shouldn't already be in progress or finished
    if (lobby.status === 'in_progress' || lobby.status === 'finished') {
        return res.status(400).json({ message: "The game has already started or is finished." });
    }

    // 3. Update the lobby status
    lobby.status = 'in_progress';
    lobby.countdownStartTime = null; // Clear the timer just in case

    const updatedLobby = await lobby.save();

        // --- üëá –û–¢–ü–†–ê–í–ö–ê –û–ë–ù–û–í–õ–ï–ù–ò–Ø –ß–ï–†–ï–ó WEBSOCKET üëá ---
    const io = req.app.get('socketio'); // –ü–æ–ª—É—á–∞–µ–º io –∏–∑ app
    io.in(req.params.id).emit('lobbyUpdated', updatedLobby.toObject()); // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –≤ "–∫–æ–º–Ω–∞—Ç–µ"

    res.status(200).json(updatedLobby.toObject());

  } catch (error)
    {
    console.error("Error starting game:", error);
    res.status(500).json({ message: 'Server error' });
  }
});

router.post('/:id/declare-winner', async (req, res) => {
  try {
    const { hostId, winningTeam } = req.body;
    const lobby = await Lobby.findOne({ id: req.params.id });

    // --- –ü—Ä–æ–≤–µ—Ä–∫–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---
    if (!lobby) return res.status(404).json({ message: "–õ–æ–±–±–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" });
    if (String(lobby.host.id) !== String(hostId)) {
      return res.status(403).json({ message: "–¢–æ–ª—å–∫–æ —Ö–æ—Å—Ç –º–æ–∂–µ—Ç –æ–ø—Ä–µ–¥–µ–ª—è—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—è!" });
    }
    if (lobby.status !== 'in_progress') {
      return res.status(400).json({ message: "–ò–≥—Ä–∞ –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ" });
    }

    const entryFee = lobby.entryFee;
    const winners = lobby.slots.filter(s => s.user && s.team === winningTeam).map(s => s.user);
    const losers = lobby.slots.filter(s => s.user && s.team !== winningTeam).map(s => s.user);
    
    // --- üëá –ù–û–í–ê–Ø –ò –ü–†–ê–í–ò–õ–¨–ù–ê–Ø –õ–û–ì–ò–ö–ê –†–ê–°–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –ü–†–ò–ó–û–í üëá ---

    // 1. –°–ø–∏—Å—ã–≤–∞–µ–º –¥–µ–Ω—å–≥–∏ —Å –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö
    for (const loser of losers) {
      await User.updateOne({ id: loser.id }, { $inc: { balance: -entryFee } });
      console.log(`[–°–ø–∏—Å–∞–Ω–æ] –° –∏–≥—Ä–æ–∫–∞ ${loser.username} —Å–ø–∏—Å–∞–Ω–æ ${entryFee}$.`);
    }

    // 2. –ù–∞—á–∏—Å–ª—è–µ–º –¥–µ–Ω—å–≥–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º (–∫–∞–∂–¥—ã–π –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –ø–æ–ª—É—á–∞–µ—Ç –≤–∑–Ω–æ—Å –æ–¥–Ω–æ–≥–æ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–≥–æ)
    // –≠—Ç–∞ –ª–æ–≥–∏–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–ª—è –∏–≥—Ä 1v1, 2v2, 5v5 –∏ —Ç.–¥.
    const amountToWin = entryFee * (losers.length / winners.length);
    for (const winner of winners) {
      await User.updateOne({ id: winner.id }, { $inc: { balance: amountToWin } });
      console.log(`[–ù–∞—á–∏—Å–ª–µ–Ω–æ] –ò–≥—Ä–æ–∫—É ${winner.username} –Ω–∞—á–∏—Å–ª–µ–Ω–æ ${amountToWin}$.`);
    }
    
    // 3. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ª–æ–±–±–∏
    lobby.status = 'finished';
    const updatedLobby = await lobby.save();

    const io = req.app.get('socketio');
    io.in(req.params.id).emit('lobbyUpdated', updatedLobby.toObject());

    res.status(200).json({ 
      message: `–ö–æ–º–∞–Ω–¥–∞ ${winningTeam} –ø–æ–±–µ–¥–∏–ª–∞!`, 
      lobby: updatedLobby.toObject() // –î–æ–±–∞–≤–ª—è–µ–º .toObject() –∏ –∑–¥–µ—Å—å
    });

  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ –ø—Ä–∏–∑–æ–≤:", error);
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

module.exports = router;