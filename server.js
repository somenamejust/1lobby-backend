require('dotenv').config();

const express = require('express');
const http = require('http');
const { Server } = require("socket.io");
const cors = require('cors');
const mongoose = require('mongoose');
const session = require('express-session');
const passport = require('passport');

// –ú–æ–¥–µ–ª–∏ –∏ –º–∞—Ä—à—Ä—É—Ç—ã
const Lobby = require('./models/Lobby');
const authRoutes = require('./routes/auth');
const userRoutes = require('./routes/users');
const lobbyRoutes = require('./routes/lobbies');
const botService = require('./services/botService');

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
const app = express();
const server = http.createServer(app);
const PORT = 5000;

const io = new Server(server, {
  cors: {
    origin: ['http://localhost:3000', 'https://1lobby.vercel.app', 'https://1lobby.xyz'],
    methods: ["GET", "POST", "PUT"],
    credentials: true // --- üëá –ò–ó–ú–ï–ù–ï–ù–ò–ï ‚Ññ1: –†–∞–∑—Ä–µ—à–∞–µ–º –ø–µ—Ä–µ–¥–∞—á—É cookie üëá ---
  }
});

// –ú–∏–¥–ª–≤–∞—Ä—ã (–ø–æ–º–æ—â–Ω–∏–∫–∏)
app.set('socketio', io); // –î–µ–ª–∞–µ–º io –¥–æ—Å—Ç—É–ø–Ω—ã–º –≤ —Ä–æ—É—Ç–∞—Ö

app.set('trust proxy', 1); 

// --- üëá –ò–ó–ú–ï–ù–ï–ù–ò–ï ‚Ññ2: –ë–æ–ª–µ–µ –Ω–∞–¥—ë–∂–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è CORS –∏ —Å–µ—Å—Å–∏–π üëá ---
app.use(cors({
    origin: ['http://localhost:3000', 'https://1lobby.vercel.app', 'https://1lobby.xyz'],
    credentials: true // –†–∞–∑—Ä–µ—à–∞–µ–º –±—Ä–∞—É–∑–µ—Ä—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å cookie
}));

app.use(express.json());

// --- –ù–ê–°–¢–†–û–ô–ö–ê –°–ï–°–°–ò–ô –ò PASSPORT (–î–û –ú–ê–†–®–†–£–¢–û–í!) ---
app.use(session({ 
    secret: process.env.SESSION_SECRET, 
    resave: false, 
    saveUninitialized: false, // –û—Å—Ç–∞–≤–ª—è–µ–º false –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    cookie: {
        secure: false, // false –¥–ª—è http
        httpOnly: true,
        sameSite: 'lax', // Lax - –ª—É—á—à–∏–π –±–∞–ª–∞–Ω—Å –¥–ª—è OAuth —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤
    }
}));

app.use(passport.initialize());
app.use(passport.session());

// –ú–∞—Ä—à—Ä—É—Ç—ã
app.use('/api/auth', authRoutes);
app.use('/api/lobbies', lobbyRoutes);
app.use('/api/users', userRoutes);

// –õ–æ–≥–∏–∫–∞ Socket.IO
io.on('connection', (socket) => {
  console.log(`üîå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è: ${socket.id}`);

  socket.on('registerUser', (userId) => {
    socket.data.userId = userId;
    console.log(`[–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è] –°–æ–∫–µ—Ç ${socket.id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
  });

  socket.on('joinLobbyRoom', (lobbyId) => {
    const roomName = String(lobbyId);
    socket.join(roomName);
    console.log(`[–ö–æ–º–Ω–∞—Ç–∞] –°–æ–∫–µ—Ç ${socket.id} –≤–æ—à–µ–ª –≤ –∫–æ–º–Ω–∞—Ç—É ${roomName}`);
  });

  socket.on('sendChatMessage', async ({ lobbyId, user, message }) => {
    try {
      const lobby = await Lobby.findOne({ id: lobbyId });
      if (lobby) {
        const newMessage = { user, message, timestamp: new Date() };
        lobby.chat.push(newMessage);
        lobby.markModified('chat');
        const updatedLobby = await lobby.save();
        io.in(String(lobbyId)).emit('lobbyUpdated', updatedLobby.toObject());
      }
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –≤ —á–∞—Ç–µ:", error);
    }
  });

  socket.on('disconnect', () => {
    console.log(`‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–∏–ª—Å—è: ${socket.id}`);
  });
});

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î –∏ –∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
mongoose.connect(process.env.DATABASE_URL)
  .then(() => {
    console.log('–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB');
    server.listen(PORT, () => {
      console.log(`üöÄ –°–µ—Ä–≤–µ—Ä —Å Socket.IO –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    });

    const botService = require('./services/botService');    
    setInterval(async () => {
      try {
        const Lobby = require('./models/Lobby');
        const lobbies = await Lobby.find({ status: 'countdown' });
        
        for (const lobby of lobbies) {
          if (lobby.countdownStartTime) {
            const elapsed = Date.now() - lobby.countdownStartTime;
            
            // –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ 60 —Å–µ–∫—É–Ω–¥
            if (elapsed >= 60000) {
              console.log(`[–ê–≤—Ç–æ—Å—Ç–∞—Ä—Ç] –ó–∞–ø—É—Å–∫ –ª–æ–±–±–∏ ${lobby.id} (—Ç–∞–π–º–µ—Ä –∏—Å—Ç–µ–∫)`);
              
              // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–≥—Ä—É –≤ Dota 2
              if (lobby.game === 'dota2' && lobby.botAccountId) {
                try {
                  const server = botService.getAvailableBotServer();
                  await botService.startGame(lobby.botAccountId, server.url);
                  console.log(`[Bot API] –ò–≥—Ä–∞ –∑–∞–ø—É—â–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏! Lobby ID: ${lobby.botAccountId}`);
                } catch (botError) {
                  console.error('[Bot API] –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Å—Ç–∞—Ä—Ç–∞ –≤ Dota 2:', botError.message);
                }
              }
              
              // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ª–æ–±–±–∏
              lobby.status = 'in_progress';
              lobby.countdownStartTime = null;
              lobby.startedAt = new Date();
              await lobby.save();
              
              // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö —á–µ—Ä–µ–∑ WebSocket
              io.in(lobby.id.toString()).emit('lobbyUpdated', lobby.toObject());
            }
          }
        }
      } catch (error) {
        console.error('[–ê–≤—Ç–æ—Å—Ç–∞—Ä—Ç] –û—à–∏–±–∫–∞:', error);
      }
    }, 5000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
  })
  .catch(err => console.error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB:', err));